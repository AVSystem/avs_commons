/*
 * Copyright 2017 AVSystem <avsystem@avsystem.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if !defined(_AVS_NEED_POSIX_API) && defined(AVS_UNIT_TESTING)
#define _AVS_NEED_POSIX_API
#endif

#ifdef _AVS_NEED_POSIX_API
// by default we try to compile in strict ISO C99 mode;
// if it's enabled, then declare _POSIX_C_SOURCE to enable POSIX APIs;
// unless on macOS - Apple's headers do not support strict ISO C99 mode in the
// way glibc and BSD libc do, and _POSIX_C_SOURCE only enables "strict POSIX"
// mode, i.e. disables a lot of APIs; it doesn't even properly recognize the
// 200809L value, so it disables a lot of APIs that actually are in POSIX...
#if (defined(__STRICT_ANSI__) || defined(_ISOC99_SOURCE)) \
        && !defined(_POSIX_C_SOURCE) && !defined(__APPLE__)
#define _POSIX_C_SOURCE 200809L
#endif
#endif // _AVS_NEED_POSIX_API

#cmakedefine AVS_COMMONS_BIG_ENDIAN

#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_BACKTRACE
#cmakedefine HAVE_BACKTRACE_SYMBOLS
#cmakedefine HAVE_POLL

#cmakedefine WITH_IPV4
#cmakedefine WITH_IPV6

#if !defined(WITH_IPV4) && !defined(WITH_IPV6)
#error "At least one IP protocol version must be enabled"
#endif

#ifdef WITH_IPV4
# define IPV4_AVAILABLE 1
#else
# define IPV4_AVAILABLE 0
#endif

#ifdef WITH_IPV6
# define IPV6_AVAILABLE 1
#else
# define IPV6_AVAILABLE 0
#endif

#ifdef WITH_IPV6
# define AVS_ADDRSTRLEN sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")
#elif defined(WITH_IPV4)
# define AVS_ADDRSTRLEN sizeof("255.255.255.255")
#endif

#cmakedefine WITH_SSL
#cmakedefine WITH_DTLS
#cmakedefine WITH_EC_KEY
#cmakedefine WITH_PSK
#cmakedefine WITH_X509

#cmakedefine WITH_AVS_LOG
#cmakedefine WITH_SOCKET_LOG

#cmakedefine WITH_OPENSSL_CUSTOM_CIPHERS "@WITH_OPENSSL_CUSTOM_CIPHERS@"

#cmakedefine WITH_VALGRIND
#ifdef WITH_VALGRIND
#include <valgrind/valgrind.h>
#include <valgrind/memcheck.h>
#include <valgrind/helgrind.h>
#include <stdint.h>
extern void *sbrk (intptr_t __delta);
#else
#define RUNNING_ON_VALGRIND 0
#define VALGRIND_HG_DISABLE_CHECKING(addr, len) ((void) 0)
#define VALGRIND_MAKE_MEM_DEFINED_IF_ADDRESSABLE(addr, len) ((void) 0)
#endif

#cmakedefine HAVE_PRAGMA_DIAGNOSTIC

#ifndef AVS_UNIT_TESTING
#cmakedefine HAVE_VISIBILITY
#endif

#if defined(HAVE_VISIBILITY)
/* set default visibility for external symbols */
#pragma GCC visibility push(default)
#define VISIBILITY_SOURCE_BEGIN         _Pragma("GCC visibility push(hidden)")
#define VISIBILITY_PRIVATE_HEADER_BEGIN _Pragma("GCC visibility push(hidden)")
#define VISIBILITY_PRIVATE_HEADER_END   _Pragma("GCC visibility pop")
#else
#define VISIBILITY_SOURCE_BEGIN
#define VISIBILITY_PRIVATE_HEADER_BEGIN
#define VISIBILITY_PRIVATE_HEADER_END
#endif

#cmakedefine HAVE_BUILTIN_ADD_OVERFLOW
#cmakedefine HAVE_BUILTIN_MUL_OVERFLOW

#cmakedefine HAVE_C11_STDATOMIC

#cmakedefine WITH_INTERNAL_LOGS

#cmakedefine WITH_INTERNAL_TRACE

#cmakedefine WITH_MBEDTLS_LOGS

#cmakedefine WITH_AVS_COAP_MESSAGE_CACHE

#cmakedefine WITH_AVS_COAP_NET_STATS

#cmakedefine WITH_AVS_HTTP_ZLIB

#cmakedefine WITH_TLS_SESSION_PERSISTENCE
