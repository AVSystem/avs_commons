/*
 * AVSystem Commons Library
 *
 * Copyright (C) 2014 AVSystem <http://www.avsystem.com/>
 *
 * This code is free and open source software licensed under the MIT License.
 * See the LICENSE file for details.
 */

#ifndef AVS_COMMONS_DEFS_H
#define AVS_COMMONS_DEFS_H

#include <stddef.h>
#include <stdint.h>

#ifdef	__cplusplus
extern "C" {
#endif

/**
 * @file defs.h
 *
 * Global common definitions.
*/

#cmakedefine AVS_HAS_NET_IF_H
#ifdef AVS_HAS_NET_IF_H
#include <net/if.h>
#else
#define IF_NAMESIZE 16
#endif

/**
 * Internal definitions used by the library to implement the functionality.
 */
/**@{*/
#define AVS_CONCAT_INTERNAL__(prefix, suffix) prefix##suffix
/**@}*/

/**
 * Returns a pointer to a structure member given by offset. Can be thought of as
 * an inverse operation to standard library <c>offsetof</c>
 *
 * @param type       Type of the data member.
 *
 * @param struct_ptr Pointer to a data structure.
 *
 * @param offset     Offset in bytes from <c>struct_ptr</c>.
 */
#define AVS_APPLY_OFFSET(type, struct_ptr, offset) \
        ((type *) (((char *) (intptr_t) (struct_ptr)) + (offset)))

/**
 * Concatenates two tokens. Can be used to do macro expansion before standard C
 * preprocessor concatenation.
 *
 * @param prefix First token to concatenate.
 *
 * @param suffix Second token to concatenate.
 */
#define AVS_CONCAT(prefix, suffix) AVS_CONCAT_INTERNAL__(prefix, suffix)

/**
 * C89-compliant replacement for <c>max_align_t</c>.
 *
 * <c>max_align_t</c> is a type defined in C11 and C++11 standards, that has
 * alignment requirements suitable for any primitive data type.
 *
 * This type simulates it with an union of types that are considered candidates
 * for the largest type available - a pointer, a function pointer,
 * <c>long double</c> and <c>intmax_t</c>.
 */
typedef union {
    /** @cond Doxygen_Suppress */
    /* candidates for "largest type"
     * add offending type if getting alignment errors */
    void *ptr;
    void (*fptr)();
    long double ld;
    intmax_t i;
    /** @endcond */
} avs_max_align_t;

/**
 * C89-compliant replacement for <c>static_assert</c>.
 */
#define AVS_STATIC_ASSERT(condition, message) \
    struct AVS_CONCAT(static_assert_,message) { \
        char message[(condition) ? 1 : -1]; \
    }

#ifdef	__cplusplus
}
#endif

#if (__GNUC__ >= 4)
#define AVS_F_SENTINEL __attribute__((sentinel(0)))
#endif
#if defined(__GNUC__) && ((__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#define AVS_F_PRINTF(fmt_idx, ellipsis_idx) __attribute__((format(printf, fmt_idx, ellipsis_idx)))
#endif

#ifndef AVS_F_SENTINEL
#define AVS_F_SENTINEL
#endif
#ifndef AVS_F_PRINTF
#define AVS_F_PRINTF(...)
#endif

#endif	/* AVS_COMMONS_DEFS_H */

