/*
 * Copyright 2017-2020 AVSystem <avsystem@avsystem.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef AVS_COMMONS_CONFIG_H
#define AVS_COMMONS_CONFIG_H

/**
 * @file avs_commons_config.h
 *
 * avs_commons library configuration.
 *
 * The preferred way to compile avs_commons is to use CMake, in which case this
 * file will be generated automatically by CMake.
 *
 * However, to provide compatibility with various build systems used especially
 * by embedded platforms, it is alternatively supported to compile avs_commons
 * by other means, in which case this file will need to be provided manually.
 *
 * In the repository, this file is provided as <c>avs_commons_config.h.in</c>,
 * intended to be processed by CMake. If editing this file manually, please copy
 * or rename it to <c>avs_commons_config.h</c> and for each of the
 * <c>#cmakedefine</c> directives, please either replace it with regular
 * <c>#define</c> to enable it, or comment it out to disable. You may also need
 * to replace <c>@VARIABLE@</c> arguments with concrete values. Please refer to
 * the comments above each of the specific definition for details.
 */

/**
 * Options that describe capabilities of the build environment.
 *
 * NOTE: If you leave some of these macros undefined, even though the given
 * feature is actually available in the system, avs_commons will attempt to use
 * its own substitutes, which may be incompatible with the definition in the
 * system and lead to undefined behaviour.
 */
/**@{*/
/**
 * Is the target platform big-endian?
 *
 * If undefined, little-endian is assumed. Mixed-endian architectures are not
 * supported.
 *
 * Affects <c>avs_convert_be*()</c> and <c>avs_[hn]to[hn]*()</c> calls in
 * avs_utils and, by extension, avs_persistence.
 */
#cmakedefine AVS_COMMONS_BIG_ENDIAN

/**
 * Is GNU __builtin_add_overflow() extension available?
 *
 * Affects time handling functions in avs_utils. If disabled, software overflow
 * checking will be compiled. Note that this software overflow checking code
 * relies on U2 representation of signed integers.
 */
#cmakedefine AVS_COMMONS_HAVE_BUILTIN_ADD_OVERFLOW

/**
 * Is GNU __builtin_mul_overflow() extension available?
 *
 * Affects time handling functions in avs_utils. If disabled, software overflow
 * checking will be compiled. Note that this software overflow checking code
 * relies on U2 representation of signed integers.
 */
#cmakedefine AVS_COMMONS_HAVE_BUILTIN_MUL_OVERFLOW

/**
 * Is net/if.h available in the system?
 *
 * NOTE: If the header is indeed available, but this option is not defined, the
 * <c>IF_NAMESIZE</c> macro will be defined <strong>publicly by avs_commons
 * headers</strong>, which may conflict with system definitions.
 */
#cmakedefine AVS_COMMONS_HAVE_NET_IF_H

/**
 * Is sys/types.h available in the system?
 *
 * NOTE: If the header is indeed available, but this option is not defined, the
 * <c>ssize_t</c> type will be defined <strong>publicly by avs_commons
 * headers</strong>, which may conflict with system definitions.
 */
#cmakedefine AVS_COMMONS_HAVE_SYS_TYPES_H

/**
 * Are GNU visibility pragmas (#pragma GCC visibility push/pop) available?
 *
 * Meaningful mostly if avs_commons will be directly or indirectly linked into
 * a shared library. Causes all symbols except those declared in public headers
 * to be hidden, i.e. not exported outside the shared library. If not defined,
 * default compiler visibility settings will be used, but you still may use
 * compiler flags and linker version scripts to replicate this manually if
 * needed.
 */
#cmakedefine AVS_COMMONS_HAVE_VISIBILITY
/**@}*/

/**
 * Options that control compilation of avs_commons components.
 *
 * Each of the configuration options below enables, if defined, one of the core
 * components of the avs_commons library.
 *
 * NOTE: Enabling avs_unit will cause an object file with an implementation of
 * main() to be generated.
 */
/**@{*/
#cmakedefine AVS_COMMONS_WITH_AVS_ALGORITHM
#cmakedefine AVS_COMMONS_WITH_AVS_BUFFER
#cmakedefine AVS_COMMONS_WITH_AVS_COMPAT_THREADING
#cmakedefine AVS_COMMONS_WITH_AVS_CRYPTO
#cmakedefine AVS_COMMONS_WITH_AVS_HTTP
#cmakedefine AVS_COMMONS_WITH_AVS_LIST
#cmakedefine AVS_COMMONS_WITH_AVS_LOG
#cmakedefine AVS_COMMONS_WITH_AVS_NET
#cmakedefine AVS_COMMONS_WITH_AVS_PERSISTENCE
#cmakedefine AVS_COMMONS_WITH_AVS_RBTREE
#cmakedefine AVS_COMMONS_WITH_AVS_SCHED
#cmakedefine AVS_COMMONS_WITH_AVS_STREAM
#cmakedefine AVS_COMMONS_WITH_AVS_UNIT
#cmakedefine AVS_COMMONS_WITH_AVS_UTILS
#cmakedefine AVS_COMMONS_WITH_AVS_VECTOR
/**@}*/

/**
 * Options that control compilation of avs_compat_threading implementations.
 *
 * If CMake is not used, in the typical scenario at most one of the following
 * implementation may be enabled at the same time. If none is enabled, the
 * relevant symbols will need to be provided by the user, if used.
 *
 * These are meaningful only if <c>AVS_COMMONS_WITH_AVS_COMPAT_THREADING</c> is
 * defined.
 */
/**@{*/
/**
 * Enable implementation based on spinlocks.
 *
 * This implementation is usually very inefficient, and requires C11 stdatomic.h
 * header to be available.
 */
#cmakedefine AVS_COMMONS_COMPAT_THREADING_WITH_ATOMIC_SPINLOCK

/**
 * Enable implementation based on the POSIX Threads library.
 *
 * This implementation is preferred over the spinlock-based one, but the POSIX
 * Threads library is normally available only in UNIX-like environments.
 */
#cmakedefine AVS_COMMONS_COMPAT_THREADING_WITH_PTHREAD
/**@}*/

/**
 * Options that control compilation of code depending on TLS backend library.
 *
 * If CMake is not used, in the typical scenario at most one of the following
 * DTLS backends may be enabled at the same time. If none is enabled,
 * functionalities that depends on cryptography will be disabled.
 *
 * Affects avs_crypto, avs_net, and avs_stream (for the MD5 implementation).
 *
 * mbed TLS is the main development backend, and is preferred as such. OpenSSL
 * backend supports most functionality as well, but is not as thoroughly tested.
 * TinyDTLS support is only rudimentary.
 */
/**@{*/
#cmakedefine AVS_COMMONS_WITH_MBEDTLS
#cmakedefine AVS_COMMONS_WITH_OPENSSL
#cmakedefine AVS_COMMONS_WITH_TINYDTLS
/**@}*/

/**
 * Enable support for HTTP content compression in avs_http.
 *
 * Requires linking with zlib.
 */
#cmakedefine AVS_COMMONS_HTTP_WITH_ZLIB

/**
 * Options related to avs_log and logging support within avs_commons.
 */
/**@{*/
/* clang-format off */
/**
 * Size, in bytes, of the avs_log buffer.
 *
 * Log messages that would (including the level, module name and code location)
 * otherwise be longer than this value minus one (for the terminating null
 * character) will be truncated.
 *
 * NOTE: This macro MUST be defined if avs_log is enabled.
 *
 * If editing this file manually, <c>@AVS_COMMONS_LOG_MAX_LINE_LENGTH@</c> shall
 * be replaced with a positive integer literal. The default value define in
 * CMake build scripts is 512.
 */
#cmakedefine AVS_COMMONS_LOG_MAX_LINE_LENGTH @AVS_COMMONS_LOG_MAX_LINE_LENGTH@
/* clang-format on */

/**
 * Configures avs_log to use a synchronized global buffer instead of allocating
 * a buffer on the stack when constructing log messages.
 *
 * Requires avs_compat_threading to be enabled.
 *
 * Enabling this option would reduce the stack space required to use avs_log, at
 * the expense of global storage and the complexity of using a mutex.
 */
#cmakedefine AVS_COMMONS_LOG_USE_GLOBAL_BUFFER

/**
 * Enables the "micro logs" feature.
 *
 * Replaces all occurrences of the <c>AVS_DISPOSABLE_LOG()</c> macro with single
 * space strings. This is intended to reduce the size of the compiled code, by
 * stripping it of almost all log string data.
 *
 * Note that this setting will propagate both to avs_commons components
 * themselves (as all its internal logs make use of <c>AVS_DISPOSABLE_LOG()</c>)
 * and the user code that uses it.
 */
#cmakedefine AVS_COMMONS_WITH_MICRO_LOGS

/**
 * Enables logging inside avs_commons.
 *
 * If this macro is not defined at avs_commons compile time, calls to avs_log
 * will not be generated inside avs_commons components.
 */
#cmakedefine AVS_COMMONS_WITH_INTERNAL_LOGS

/**
 * Enables TRACE-level logs inside avs_commons.
 *
 * Only meaningful if AVS_COMMONS_WITH_INTERNAL_LOGS is enabled.
 *
 * If this macro is not defined at avs_commons compile time, calls to avs_log
 * with the level set to TRACE will not be generated inside avs_commons
 * components.
 */
#cmakedefine AVS_COMMONS_WITH_INTERNAL_TRACE
/**@}*/

/**
 * Options related to avs_net.
 */
/**@{*/
/**
 * Enables support for IPv4 connectivity.
 *
 * At least one of AVS_COMMONS_NET_WITH_IPV4 and AVS_COMMONS_NET_WITH_IPV6
 * MUST be defined if avs_net is enabled.
 */
#cmakedefine AVS_COMMONS_NET_WITH_IPV4

/**
 * Enables support for IPv6 connectivity.
 *
 * At least one of AVS_COMMONS_NET_WITH_IPV4 and AVS_COMMONS_NET_WITH_IPV6
 * MUST be defined if avs_net is enabled.
 */
#cmakedefine AVS_COMMONS_NET_WITH_IPV6

/**
 * If the TLS backend is set to mbed TLS, allows to use a custom user-provided
 * function to initialize mbed TLS entropy context.
 *
 * See the check for this macro in defs.h for more information.
 */
#cmakedefine AVS_COMMONS_NET_WITH_MBEDTLS_CUSTOM_ENTROPY_INITIALIZER

/**
 * If the TLS backend is set to OpenSSL, enables support for DTLS.
 *
 * DTLS is always enabled for the mbed TLS and TinyDTLS backends.
 */
#cmakedefine AVS_COMMONS_NET_WITH_DTLS

/**
 * Enables debug logs generated by mbed TLS.
 *
 * An avs_log-backend handler, logging for the "mbedtls" module on the TRACE
 * level, is installed using <c>mbedtls_ssl_conf_dbg()</c> for each (D)TLS
 * socket created if this option is enabled.
 */
#cmakedefine AVS_COMMONS_NET_WITH_MBEDTLS_LOGS

/**
 * Enables the default implementation of avs_net TCP and UDP sockets.
 *
 * Requires either a UNIX-like operating environment, or a compatibility layer
 * with a high degree of compatibility with standard BSD sockets with an
 * appropriate compatibility header - lwIP and Winsock are currently supported
 * for this scenario.
 */
#cmakedefine AVS_COMMONS_NET_WITH_POSIX_AVS_SOCKET

/**
 * If the TLS backend is either mbed TLS or OpenSSL, enables support of
 * pre-shared key security.
 *
 * PSK is the only supported security mode for the TinyDTLS backend.
 */
#cmakedefine AVS_COMMONS_NET_WITH_PSK

/**
 * Enables support for logging socket communication to file.
 *
 * If this option is enabled, avs_net_socket_debug() can be used to enable
 * logging all communication to a file called DEBUG.log. If disabled,
 * avs_net_socket_debug() will always return an error.
 */
#cmakedefine AVS_COMMONS_NET_WITH_SOCKET_LOG

/**
 * If the TLS backend is either mbed TLS or OpenSSL, enables support for (D)TLS
 * session persistence.
 *
 * Session persistence is not currently supported for the TinyDTLS backend.
 */
#cmakedefine AVS_COMMONS_NET_WITH_TLS_SESSION_PERSISTENCE

/**
 * Enables usage of Valgrind API to suppress some of the false positives
 * generated by the OpenSSL backend.
 */
#cmakedefine AVS_COMMONS_NET_WITH_VALGRIND

/**
 * If the TLS backend is either mbed TLS or OpenSSL, enables support of
 * X.509 certificate based security.
 *
 * Certificate based security is not currently supported with TinyDTLS.
 */
#cmakedefine AVS_COMMONS_NET_WITH_X509
/**@}*/

/**
 * Enable thread safety in avs_sched.
 *
 * Makes all scheduler accesses synchronized and thread-safe, at the cost of
 * requiring avs_compat_threading to be enabled, and higher resource usage.
 */
#cmakedefine AVS_COMMONS_SCHED_THREAD_SAFE

/** Is the library compiled with GCC symbol poisoning support? */
#cmakedefine AVS_COMMONS_WITH_POISONING

#cmakedefine WITH_POISONING

#cmakedefine WITH_POSIX_AVS_TIME
#cmakedefine WITH_STANDARD_ALLOCATOR

#endif /* AVS_COMMONS_CONFIG_H */
